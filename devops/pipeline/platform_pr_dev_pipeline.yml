parameters:
 - name: deploy_env
   displayName: "Deployment Environment"
   default: "dev"
 - name: model_type
   displayName: "type of model to execute"
 - name: model_name
   displayName: "name of model to execute"
 - name: packaging_env
   displayName: "name of the packaging env"
   default: "simaticai"
 - name: packaging_conda_path
   displayName: "path to the packaging env"
   default: "mlops/common/environment/packaging/conda.yml"
 - name: target_device_id
   displayName: "Id of the target device"


stages:
    - stage: update_aml_environments
      displayName: update_aml_environments
      dependsOn:
      - variable_generation_training_and_packaging
      - variable_generation_delivery
      variables:
      - template: templates/experiment_variables.yml
      jobs:
      - job: check_changed_environments
        steps:
        - checkout: self
          fetchDepth: 0
          displayName: 'Checkout repository'
        - script: |
            changedFiles=$(git diff --name-only HEAD~ HEAD)
            echo "changed files:\n $changedFiles"

            train_env_changed=$(echo "$changedFiles" | grep -Eq "$CONDA_PATH|model_config.json" && echo "True" || echo "False")
            packaging_env_changed=$(echo "$changedFiles" | grep -Eq "${{ parameters.packaging_conda_path }}|model_config.json" && echo "True" || echo "False")
            delivery_env_changed=$(echo "$changedFiles" | grep -Eq "$CONDA_PATH_DELIVERY|delivery_config.json" && echo "True" || echo "False")

            echo "train_env_changed: $train_env_changed"
            echo "packaging_env_changed: $packaging_env_changed"
            echo "delivery_env_changed: $delivery_env_changed"

            echo "##vso[task.setvariable variable=train_env_changed;isOutput=true]$train_env_changed"
            echo "##vso[task.setvariable variable=packaging_env_changed;isOutput=true]$packaging_env_changed"
            echo "##vso[task.setvariable variable=delivery_env_changed;isOutput=true]$delivery_env_changed"
          displayName: 'Check changed files'
          name: check_changed_files

    - stage: execute_training_job
      displayName: execute_training_job
      dependsOn:
      - update_aml_environments
      - variable_generation_training_and_packaging
      variables:
      - name: UPDATE_ENV
        value: $[ stageDependencies.update_aml_environments.check_changed_environments.outputs['check_changed_files.train_env_changed'] ]
      - template: templates/experiment_variables.yml
      jobs:
      - job: Execute_ml_Job_Pipeline
        steps:
        - template: templates/get_connection_details.yml
        - template: templates/configure_azureml_agent.yml
        - template: templates/execute_mlops_pipeline.yml
          parameters:
            script_parameter: |
              python -m mlops.${{ parameters.model_type }}.pipeline.mlops_pipeline \
                --subscription_id $(SUBSCRIPTION_ID)  \
                --resource_group_name $(RESOURCE_GROUP_NAME) \
                --workspace_name $(WORKSPACE_NAME) \
                --cluster_name $(CLUSTER_NAME) \
                --cluster_size $(CLUSTER_SIZE) \
                --cluster_region $(CLUSTER_REGION) \
                --build_reference $(Build.BuildID) \
                --deploy_environment ${{ parameters.deploy_env }} \
                --experiment_name $(EXPERIMENT_NAME) \
                --display_name mlops_$(DISPLAY_NAME) \
                --wait_for_completion True \
                --environment_name $(ENVIRONMENT_NAME) \
                --env_base_image_name $(ENV_BASE_IMAGE_NAME) \
                --model_name $(MODEL_NAME) \
                --conda_path $(CONDA_PATH) \
                --output_file run_id.txt \
                --asset_name $(ASSET_NAME) \
                --update_env $(UPDATE_ENV)
              model_name=$(cat ./named-outputs/pipeline_job_mlops_results/mlops_results | jq '.model_name' -r)
              model_version=$(cat ./named-outputs/pipeline_job_mlops_results/mlops_results | jq '.model_version' -r)
              echo "The model has been registered in Azure Model Registry: $model_name:$model_version (model type: ${{ parameters.model_type }})"
              echo "##vso[task.setvariable variable=MODEL_NAME;isOutput=true]$model_name"
              echo "##vso[task.setvariable variable=MODEL_VERSION;isOutput=true]$model_version"

    - stage: package_model
      displayName: package_model
      dependsOn:
      - update_aml_environments
      - execute_training_job
      - variable_generation_training_and_packaging
      variables:
      - name: MODEL_NAME
        value: $[ stageDependencies.execute_training_job.Execute_ml_Job_Pipeline.outputs['submit_aml_job_task.MODEL_NAME'] ]
      - name: MODEL_VERSION
        value: $[ stageDependencies.execute_training_job.Execute_ml_Job_Pipeline.outputs['submit_aml_job_task.MODEL_VERSION'] ]
      - name: UPDATE_ENV
        value: $[ stageDependencies.update_aml_environments.check_changed_environments.outputs['check_changed_files.packaging_env_changed'] ]
      - template: templates/experiment_variables.yml
      - group: vg-az-client
      jobs:
      - job: 'run_packaging_job'
        displayName: 'run_packaging_job'
        steps:
        - template: templates/configure_azureml_agent.yml
        - task: AzureCLI@2
          name: submit_packaging_job
          displayName: Execute Packaging Job
          continueOnError: false
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: bash
            workingDirectory: $(System.DefaultWorkingDirectory)
            scriptLocation: inlineScript
            inlineScript: |
              python -m mlops.common.pipeline.packaging_pipeline \
                --build_reference $(Build.BuildID) \
                --subscription_id $(SUBSCRIPTION_ID) \
                --resource_group_name $(RESOURCE_GROUP_NAME) \
                --workspace_name $(WORKSPACE_NAME) \
                --cluster_name $(CLUSTER_NAME) \
                --cluster_size $(CLUSTER_SIZE) \
                --cluster_region $(CLUSTER_REGION) \
                --deploy_environment ${{ parameters.deploy_env }}  \
                --experiment_name $(EXPERIMENT_NAME) \
                --display_name packaging_$(DISPLAY_NAME) \
                --wait_for_completion True \
                --environment_name ${{ parameters.packaging_env }} \
                --model_type ${{ parameters.model_type }} \
                --model_name $(MODEL_NAME) \
                --model_version $(MODEL_VERSION) \
                --package_name $(PACKAGE_NAME) \
                --conda_path ${{ parameters.packaging_conda_path }} \
                --raw_data ${VALIDATION_ASSET_NAME} \
                --output_file run_id.txt \
                --update_env $(UPDATE_ENV)
              edge_package_name=$(cat ./named-outputs/registry_results/registry_results | jq '.edge_package_name' -r)
              edge_package_version=$(cat ./named-outputs/registry_results/registry_results | jq '.edge_package_version' -r)
              echo "The package has been registered in Azure Model Registry: $edge_package_name:$edge_package_version"
              echo "##vso[task.setvariable variable=edge_package_name;isOutput=true]$edge_package_name"
              echo "##vso[task.setvariable variable=edge_package_version;isOutput=true]$edge_package_version"

    - stage: deliver_model
      displayName: deliver_model
      dependsOn:
      - update_aml_environments
      - package_model
      - variable_generation_delivery
      - variable_generation_training_and_packaging
      variables:
      - name: edge_package_name
        value: $[ stageDependencies.package_model.run_packaging_job.outputs['submit_packaging_job.edge_package_name'] ]
      - name: edge_package_version
        value: $[ stageDependencies.package_model.run_packaging_job.outputs['submit_packaging_job.edge_package_version'] ]
      - name: UPDATE_ENV
        value: $[ stageDependencies.update_aml_environments.check_changed_environments.outputs['check_changed_files.delivery_env_changed'] ]
      - template: templates/experiment_variables.yml
      jobs:
      - job: 'run_delivery_job'
        displayName: 'run_delivery_job'
        steps:
        - template: templates/configure_azureml_agent.yml
        - task: AzureCLI@2
          name: submit_delivery_job
          displayName: Execute Delivery Job
          continueOnError: false
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: bash
            workingDirectory: $(System.DefaultWorkingDirectory)
            scriptLocation: inlineScript
            inlineScript: |
              if [[ -z "${{ parameters.target_device_id }}" ]]; then echo "please define the 'target_device_id' environment variable when triggering the job"; exit 1; else echo "target_device_id=${{ parameters.target_device_id }}"; fi
              echo "Delivering edge package from Azure Model Registry: $(edge_package_name):$(edge_package_version)"
              echo "Target device in Azure IoT Hub: ${{ parameters.target_device_id }}"
              python -m mlops.common.pipeline.delivery_pipeline  \
                  --build_reference $(Build.BuildID) \
                  --subscription_id $(SUBSCRIPTION_ID) \
                  --resource_group_name $(RESOURCE_GROUP_NAME_DELIVERY) \
                  --workspace_name $(WORKSPACE_NAME_DELIVERY) \
                  --cluster_name $(CLUSTER_NAME_DELIVERY) \
                  --cluster_size $(CLUSTER_SIZE_DELIVERY) \
                  --cluster_region $(CLUSTER_REGION_DELIVERY) \
                  --experiment_name $(EXPERIMENT_NAME) \
                  --display_name delivery_$(DISPLAY_NAME_DELIVERY) \
                  --wait_for_completion True \
                  --env_base_image_name $(ENV_BASE_IMAGE_NAME_DELIVERY) \
                  --conda_path $(CONDA_PATH_DELIVERY) \
                  --environment_name $(ENVIRONMENT_NAME_DELIVERY) \
                  --keyvault_name $(KEYVAULT_NAME_DELIVERY) \
                  --iot_hub_connection_string_secret_name $(IOT_HUB_CONNECTION_STRING_SECRET_NAME_DELIVERY) \
                  --event_hub_connection_string_secret_name $(EVENT_HUB_CONNECTION_STRING_SECRET_NAME_DELIVERY) \
                  --device_id ${{ parameters.target_device_id }}  \
                  --edge_package_name $(edge_package_name) \
                  --edge_package_version $(edge_package_version) \
                  --deploy_environment ${{ parameters.deploy_env }} \
                  --update_env $(UPDATE_ENV)
              echo "The package $(edge_package_name):$(edge_package_version) has been delivered to ${{ parameters.target_device_id }}"
