# Copyright (C) 2023 Siemens AG
#
# SPDX-License-Identifier: MIT

pr: none
trigger:
  branches:
    exclude:
      - main
      - development
  paths:
    include:
      - devops/pipeline/build_codebase_pipeline.yml
      - mlops/*
      - infrastructure/*
      - test/*

pool:
  name: $(AGENT_POOL)

variables:
- group: vg-az-client

stages:
- stage: static_analysis
  jobs:
  - job: run_flake8
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.8'
      inputs:
        versionSpec: '3.8'
    - script: |
        python -m pip install --upgrade pip
        pip install flake8 flake8-html
        flake8 --format=html --htmldir=flake8_report
      displayName: 'Generate flake8 HTML report'
      continueOnError: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish flake8 report'
      inputs:
        targetPath: 'flake8_report'
        publishLocation: 'pipeline'
        artifactName: 'flake8Report'

- stage: testing_mlops
  condition: always()
  jobs:
  - job: run_mlops_tests
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.8'
      inputs:
        versionSpec: '3.8'
    - script: |
        export PATH=${PATH}:$(pwd)
        pip install -r .devcontainer/requirements.txt
        pip install -r mlops/requirements.txt -f mlops/common/environment/packaging
        pip install html-testRunner
        export PYTHONPATH="mlops:${PYTHONPATH}"
        python -m test.mlops.test_suite
      name: mlops_unit_tests
      displayName: "Execute python tests on MLOps"

- stage: testing_infrastructure
  condition: always()
  jobs:
  - job: check_changed_files
    steps:
    - checkout: self
      fetchDepth: 0
      displayName: 'Checkout repository'
    - powershell: |
        $changedFiles = git diff --name-only HEAD~ HEAD
        $relevantPaths = @('infrastructure/*', 'devops/pipeline/build_codebase_pipeline.yml')
        $hasRelevantChange = $false
        foreach ($file in $changedFiles) {
          foreach ($path in $relevantPaths) {
            if ($file -like $path) {
              $hasRelevantChange = $true
              break
            }
          }
          if ($hasRelevantChange) {
            break
          }
        }

        echo "Execute infrastructure test: $hasRelevantChange"
        Write-Output "##vso[task.setvariable variable=runInfrastructureTests;isOutput=true]$hasRelevantChange"
      displayName: 'Check for relevant changed files'
      name: check_relevant_change

  - job: run_terraform_test
    dependsOn:
    - check_changed_files
    condition: and(succeeded(), eq(dependencies.check_changed_files.outputs['check_relevant_change.runInfrastructureTests'], 'true'))
    steps:
    - task: GoTool@0
      displayName: 'Use Go 1.19.3'
      inputs:
        version: '1.19.3'
    - task: AzureCLI@2
      name: main_test
      displayName: "Execute terraform tests"
      inputs:
        azureSubscription:  $(AZURE_RM_SVC_CONNECTION)
        scriptType: bash
        workingDirectory: $(System.DefaultWorkingDirectory)
        addSpnToEnvironment: false
        scriptLocation: inlineScript
        inlineScript: |
          az account show
          cd infrastructure/main
          terraform init \
          --backend-config="resource_group_name=tfstate" \
          --backend-config="storage_account_name=tfstate5748" \
          --backend-config="container_name=tfstate" \
          --backend-config="key=$(Build.SourceBranchName)_test.tfstate"
          echo "backend initialized"
          cd test
          go test -timeout 1h
      env:
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        AZURE_TENANT_ID: $(AZURE_TENANT_ID)
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
