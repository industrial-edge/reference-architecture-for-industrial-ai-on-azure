# Copyright (C) 2023 Siemens AG
#
# SPDX-License-Identifier: MIT

stages:
 - variable_creation
 - execute

variables:
  script_parameter: |
    python -m mlops.common.pipeline.delivery_pipeline
                --build_reference ${CI_JOB_ID}
                --subscription_id ${subscription_id}
                --resource_group_name ${RESOURCE_GROUP_NAME}
                --workspace_name ${WORKSPACE_NAME}
                --cluster_name ${CLUSTER_NAME}
                --experiment_name ${EXPERIMENT_NAME}
                --display_name ${CI_JOB_ID}_${edge_package_name}_v$${edge_package_version}_delivery_to_${target_device_id}
                --wait_for_completion True
                --env_base_image_name ${ENV_BASE_IMAGE_NAME}
                --conda_path ${CONDA_PATH}
                --environment_name ${ENVIRONMENT_NAME}
                --keyvault_name $KEYVAULT_NAME
                --iot_hub_connection_string_secret_name ${IOT_HUB_CONNECTION_STRING_SECRET_NAME}
                --event_hub_connection_string_secret_name ${EVENT_HUB_CONNECTION_STRING_SECRET_NAME}
                --device_id ${target_device_id}
                --edge_package_name ${edge_package_name}
                --edge_package_version $${edge_package_version}

load_config_variables:
  stage: variable_creation
  image: ${CONTAINER_REGISTRY}/reporter:latest
  script:
    - |
      jq -r '.[][0] | to_entries 
      | map("\(.key)=\(.value|tostring)")
      | .[]' mlops/config/delivery_config.json > build.env
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - build.env

execute_delivery:
  image: mcr.microsoft.com/azure-cli:latest
  stage: execute
  when: manual
  script:
    - if [[ -z "${target_device_id}" ]]; then echo "please define the 'target_device_id' environment variable when triggering the job"; exit 1; else echo "target_device_id=${target_device_id}"; fi
    - if [[ -z "${edge_package_name}" ]]; then echo "please define the 'edge_package_name' environment variable when triggering the job"; exit 1; else echo "edge_package_name=${edge_package_name}"; fi
    - if [[ -z "${edge_package_version}" ]]; then export edge_package_version=latest; fi
    - echo "edge_package_version=${edge_package_version}"
    - az login --service-principal --username=$AZURE_CLIENT_ID --password=$AZURE_CLIENT_SECRET --tenant=$AZURE_TENANT_ID
    - cd $CI_PROJECT_DIR
    - set -e # fail on error
    - python -m pip install --upgrade pip
    - pip install -r devops/pipeline/requirements/execute_job_requirements.txt
    - az version
    - echo $script_parameter
    - eval $script_parameter

